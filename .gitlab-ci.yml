image: docker:latest

stages:
- update_cache
- download
- deploy

update_cache:
  image: node:8
  stage: update_cache
  cache:
    key: node
    paths:
    - node_modules/
  variables:
    ftp_proxy: $https_proxy
  script:
  - mkdir -p /opt
  - ln -s $(pwd)/data /opt/mlst
  - rm -r node_modules/*
  - yarn install
  - DEBUG="*" npm run download
  - rm data/cache/tmp || true
  - completed=$(date "+%Y%m%d%H%M%S")
  - echo -n "$completed" > data/cache/updated.txt
  - tar -zcf /nfs/wgsa/gitlab-cache/cgps-mlst/${completed}.tgz data/cache
  - ln -sfn /nfs/wgsa/gitlab-cache/cgps-mlst/${completed}.tgz /nfs/wgsa/gitlab-cache/cgps-mlst/latest.tgz
  only:
  - web

download_mlst:
  image: node:8
  stage: download
  cache:
    key: node
    paths:
    - node_modules/
  variables:
    ftp_proxy: $https_proxy
  script:
  - mkdir -p /opt
  - ln -s $(pwd)/data /opt/mlst
  - yarn install
  - if [[ -f /nfs/wgsa/gitlab-cache/cgps-mlst/latest.tgz ]]; then tar -xzf /nfs/wgsa/gitlab-cache/cgps-mlst/latest.tgz; fi
  - if [[ -f data/cache/updated.txt ]]; then echo "[$(date)] Using cache from $(cat data/cache/updated.txt)"; else "[$(date)] No cache"; fi
  - DEBUG="*" npm run download
  only:
  - tags
  - web
  artifacts:
    paths:
    - data/cache/
    expire_in: 60 minutes
