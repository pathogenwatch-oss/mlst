image: docker:latest

all_mlst:
  only:
    variables:
      - $RUN_CORE_GENOME_MLST == "no"
  script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - git clone https://gitlab.com/cgps/cgps-typing-databases.git
    - docker run -i --rm -v $(pwd):$(pwd) -w $(pwd) -e RUN_CORE_GENOME_MLST node:10 bash -c "yarn install && npm run index -- --type=mlst --index=index_dir --database=cgps-typing-databases"
    - DATABASE_UPDATED=$(cat index_dir/updated.txt)
    - if [[ -z "${CI_COMMIT_TAG:-}" ]]; then TAG="${DATABASE_UPDATED}-${CI_COMMIT_SHA::8}"; else TAG="${DATABASE_UPDATED}-${CI_COMMIT_TAG}"; fi
    - docker build
      --build-arg http_proxy=$http_proxy
      --build-arg https_proxy=$https_proxy
      --label "git-ref=${CI_COMMIT_REF_NAME},git-commit=${CI_COMMIT_SHA},gitlab-job-id=${CI_JOB_ID},database-updated=${DATABASE_UPDATED}"
      --target test_build
      -t "$CI_REGISTRY_IMAGE:mlst-test" .
    - docker build
      --build-arg http_proxy=$http_proxy
      --build-arg https_proxy=$https_proxy
      --label "git-ref=${CI_COMMIT_REF_NAME},git-commit=${CI_COMMIT_SHA},gitlab-job-id=${CI_JOB_ID},database-updated=${DATABASE_UPDATED}"
      --target prod_build
      -t "$CI_REGISTRY_IMAGE:mlst-$TAG" .
    - docker push "$CI_REGISTRY_IMAGE:mlst-$TAG"

all_cgmlst:
  only:
    variables:
      - $RUN_CORE_GENOME_MLST == "yes"
  except:
    variables:
      - $SCHEME
  script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - git clone https://gitlab.com/cgps/cgps-typing-databases.git
    - docker run -i --rm -v $(pwd):$(pwd) -w $(pwd) -e RUN_CORE_GENOME_MLST node:10 bash -c "yarn install && npm run index -- --type=cgmlst --max-seqs 50 --index=index_dir --database=cgps-typing-databases"
    - DATABASE_UPDATED=$(cat index_dir/updated.txt)
    - if [[ -z "${CI_COMMIT_TAG:-}" ]]; then TAG="${DATABASE_UPDATED}-${CI_COMMIT_SHA::8}"; else TAG="${DATABASE_UPDATED}-${CI_COMMIT_TAG}"; fi
    - docker build
      --build-arg http_proxy=$http_proxy
      --build-arg https_proxy=$https_proxy
      --build-arg RUN_CORE_GENOME_MLST=yes
      --label "git-ref=${CI_COMMIT_REF_NAME},git-commit=${CI_COMMIT_SHA},gitlab-job-id=${CI_JOB_ID},database-updated=${DATABASE_UPDATED}"
      --target test_build
      -t "$CI_REGISTRY_IMAGE:cgmlst-test" .
    - docker build
      --build-arg http_proxy=$http_proxy
      --build-arg https_proxy=$https_proxy
      --build-arg RUN_CORE_GENOME_MLST=yes
      --label "git-ref=${CI_COMMIT_REF_NAME},git-commit=${CI_COMMIT_SHA},gitlab-job-id=${CI_JOB_ID},database-updated=${DATABASE_UPDATED}"
      --target prod_build
      -t "$CI_REGISTRY_IMAGE:cgmlst-$TAG" .
    - docker push "$CI_REGISTRY_IMAGE:cgmlst-$TAG"

cgmlst:
  only:
    variables:
      - $RUN_CORE_GENOME_MLST == "yes"
      - $SCHEME
  script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - git clone https://gitlab.com/cgps/cgps-typing-databases.git
    - docker run -i --rm -v $(pwd):$(pwd) -w $(pwd) -e RUN_CORE_GENOME_MLST -e SCHEME node:10 bash -c "yarn install && npm run index -- --type=cgmlst --scheme=$SCHEME --max-seqs 50 --index=index_dir --database=cgps-typing-databases"
    - DATABASE_UPDATED=$(cat index_dir/updated.txt)
    - if [[ -z "${CI_COMMIT_TAG:-}" ]]; then TAG="${DATABASE_UPDATED}-${CI_COMMIT_SHA::8}"; else TAG="${DATABASE_UPDATED}-${CI_COMMIT_TAG}"; fi
    # We're not running tests unless we build all the schemes
    - docker build
      --build-arg http_proxy=$http_proxy
      --build-arg https_proxy=$https_proxy
      --build-arg RUN_CORE_GENOME_MLST=yes
      --label "git-ref=${CI_COMMIT_REF_NAME},git-commit=${CI_COMMIT_SHA},gitlab-job-id=${CI_JOB_ID},database-updated=${DATABASE_UPDATED}"
      -t "$CI_REGISTRY_IMAGE:cgmlst-$SCHEME-$TAG" .
      --target prod_build
    - docker push "$CI_REGISTRY_IMAGE:cgmlst-$SCHEME-$TAG"
